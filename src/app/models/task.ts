export class Task {
    TITLE: string; // Название задачи.
    DESCRIPTION: string; // Описание задачи.
    DEADLINE: any;  // Крайний срок.
    START_DATE_PLAN: any; // Плановая дата начала.
    END_DATE_PLAN: any; // Плановая дата завершения.
    PRIORITY: any; // Приоритет.
    ACCOMPLICES: any; // Соисполнители (идентификаторы пользователей).
    ACCOMPLICE: any; // Соисполнители (поле используется для фильтрации).
    AUDITORS: any; // Наблюдатели (идентификаторы пользователей).
    AUDITOR: any; // Наблюдатели (поле используется для фильтрации).
    TAGS: any; // Теги (при добавлении - просто массив тегов в виде текста). CTasks::GetList() не возвращает поля тегов. CTaskItem::getInstance()->getTags() возвращает массив имен тегов.
    TAG: any; // Теги (поле используется для фильтрации).
    ALLOW_CHANGE_DEADLINE: any; // Флаг "Разрешить ответственному менять крайний срок".
    TASK_CONTROL: any; // Флаг "Принять работу после завершения задачи".
    PARENT_ID: any; // Идентификатор родительской задачи.
    DEPENDS_ON: any; // Идентификатор предыдущей задачи.
    GROUP_ID: any; // Идентификатор рабочей группы.
    RESPONSIBLE_ID: any; // Идентификатор ответственного.
    TIME_ESTIMATE: any; // Плановые трудозатраты.
    ID: number|string; // Идентификатор задачи. Уникален в рамках базы данных.
    CREATED_BY: any; // Идентификатор постановщика.
    DESCRIPTION_IN_BBCODE: any; // Флаг указывающий, что описание задачи хранится в BB-кодах.
    DECLINE_REASON: any; // Причина отклонения задачи.
    REAL_STATUS: any; // Истинный статус задачи, который записывается через STATUS (см. константы CTasks::STATE_xxx). Только для чтения.
    STATUS: any; // Мета-статус задачи. При записи можно использовать константы CTasks::STATE_xxx, однако, при чтении, помимо CTasks::STATE_xxx, в результатах можно увидеть CTasks::METASTATE_xxx. То есть на самом деле статус задачи может быть CTasks::STATE_NEW, а при чтении вернется нам CTasks::METASTATE_EXPIRED (для просроченной задачи).    В случае если мы хотим узнать истинный статус задачи, следует читать поле REAL_STATUS.
    RESPONSIBLE_NAME: string; // Имя ответственного.
    RESPONSIBLE_LAST_NAME: string; // Фамилия ответственного.
    RESPONSIBLE_SECOND_NAME: string; // Отчество ответственного.
    DATE_START: any; // Дата начала выполнения задачи.
    DURATION_FACT: any; // Затраченное время на задачу (в минутах).
    DURATION_PLAN: any; // Планируемая длительность в часах или днях.
    DURATION_TYPE: any; // Тип единицы измерения в планируемой длительности: days, hours или minutes.
    CREATED_BY_NAME: any; // Имя постановщикCHANGED_DATEа.
    CREATED_BY_LAST_NAME: any; // Фамилия постановщика.
    CREATED_BY_SECOND_NAME: any; // Отчество постановщика.
    CREATED_DATE: any; // Дата создания задачи.
    CHANGED_BY: any; // Пользователь, изменивший задачу в последний раз (идентификатор пользователя).
    CHANGED_DATE: any; // Дата завершения задачи.
    CLOSED_DATE:any; // Дата сдачи.
    GUID: any; // Глобально-уникальный идентификатор. С приемлемым уровнем уверенности, данный идентификатор непреднамеренно никогда не будет использован для чего-то ещё даже в других базах данных.
    MARK: any; // Оценка по задаче (возможные значения P (положительная) и N (отрицательная)).
    VIEWED_DATE: any; // Дата последнего просмотра задачи в публичном интерфейсе текущим пользователем (от имени которого делается запрос на получение данных задачи).
    TIME_SPENT_IN_LOGS: any; // Затраченное время на задачу (в секундах).
    FAVORITE: any; // Присутствие и избранном для текущего пользователя.
    ALLOW_TIME_TRACKING: any; // Флаг включения учета затраченного времени по задаче.
    ADD_IN_REPORT: any; // Флаг включения задачи в отчет по эффективности.
    FORUM_ID: any; // Идентификатор форума, в котором хранятся комментарии к задаче.
    FORUM_TOPIC_ID: any; // Идентификатор темы форума, в котором хранятся комментарии к задаче.
    COMMENTS_COUNT: number; // Число комментариев к задаче.
    SITE_ID: string|number; // Идентификатор сайта. По умолчанию в это поле записывается идентификатор сайта, на котором создается задача.
    SUBORDINATE: any; // Флаг, который показывает, является ли кто-то из участников задачи подчиненным текущего пользователя.
    FORKED_BY_TEMPLATE_ID: any; // Идентификатор шаблона, на основе которого была создана задача. Для некоторых старых задач может быть не установлен.
    MULTITASK: any; // Флаг, означающий, что задача была создана для нескольких ответственных.
    ONLY_ROOT_TASKS: any; // Поле, позволяющее выбирать только те задачи, у которых либо нет родительской задачи, либо есть, но к этой родительской задаче мы не имеем доступа.
    MATCH_WORK_TIME: any; // Флаг, который показывает, что даты исполнения и крайний срок должны всегда устанавливаться в рабочее время.
}